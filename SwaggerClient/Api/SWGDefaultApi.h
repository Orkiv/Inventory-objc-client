#import <Foundation/Foundation.h>
#import "SWGInventoryGroup.h"
#import "SWGError.h"
#import "SWGResponse.h"
#import "SWGCategory.h"
#import "SWGDictionary.h"
#import "SWGItem.h"
#import "SWGOrder.h"
#import "SWGService.h"
#import "SWGEventRequest.h"
#import "SWGApi.h"

/**
* InventoryAPI
* Orkiv Inventory API client 
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGDefaultApi: NSObject <SWGApi>

extern NSString* kSWGDefaultApiErrorDomain;
extern NSInteger kSWGDefaultApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// 
/// 
///
/// 
///  code:200 message:"Array of Inventory groups within the current account",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGInventoryGroup>*
-(NSNumber*) allGetWithCompletionHandler: 
    (void (^)(NSArray<SWGInventoryGroup>* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id Id of category to remove
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) categoriesDeleteWithId: (NSString*) _id
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// @param query Category to query against system (optional)
/// 
///  code:200 message:"Array of categories within the current account",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGCategory>*
-(NSNumber*) categoriesPostWithQuery: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGCategory>* output, NSError* error)) handler;


/// 
/// If no ID is specified a new category will be created!
///
/// @param _id category id to update.
/// @param category New category information.
/// 
///  code:200 message:"Created category",
///  code:0 message:"Unexpected error"
///
/// @return SWGCategory*
-(NSNumber*) categoriesPutWithId: (NSString*) _id
    category: (SWGCategory*) category
    completionHandler: (void (^)(SWGCategory* output, NSError* error)) handler;


/// 
/// 
///
/// @param item Item to create.
/// 
///  code:200 message:"Created item.",
///  code:0 message:"Unexpected error"
///
/// @return SWGItem*
-(NSNumber*) itemAddPostWithItem: (SWGItem*) item
    completionHandler: (void (^)(SWGItem* output, NSError* error)) handler;


/// 
/// 
///
/// @param items Items to create.
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) itemAddbulkPostWithItems: (NSArray<SWGItem>*) items
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id item id to remove
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) itemDeleteWithId: (NSString*) _id
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id item id to update.
/// @param item New item information.
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) itemPutWithId: (NSString*) _id
    item: (SWGDictionary*) item
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// @param query Item to query against system. (optional)
/// 
///  code:200 message:"Counts the total number of items that match the supplied criteria.",
///  code:0 message:"Unexpected error"
///
/// @return NSNumber*
-(NSNumber*) itemsCountPostWithQuery: (SWGDictionary*) query
    completionHandler: (void (^)(NSNumber* output, NSError* error)) handler;


/// 
/// 
///
/// @param query Item to query against system. (optional)
/// 
///  code:200 message:"Array of items within the current account",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGItem>*
-(NSNumber*) itemsPostWithQuery: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGItem>* output, NSError* error)) handler;


/// 
/// 
///
/// @param query Item to query against system. (optional)
/// 
///  code:200 message:"Array of items within the current account with all fields available, including custom ones.",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGDictionary>*
-(NSNumber*) itemsallfieldsPostWithQuery: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGDictionary>* output, NSError* error)) handler;


/// 
/// 
///
/// @param query Order to query against system. (optional)
/// 
///  code:200 message:"Array of orders within the current account",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGOrder>*
-(NSNumber*) ordersPostWithQuery: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGOrder>* output, NSError* error)) handler;


/// 
/// 
///
/// @param page Current page index. (optional)
/// @param categoryid Get items under specified category id. (optional)
/// @param sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
/// @param search Performs a regex pattern match against the items within your account (optional)
/// @param minprice Min price in hundreds. (optional)
/// @param maxprice Max price in hudreds. (optional)
/// @param query Custom parameters to query against system. (optional)
/// 
///  code:200 message:"Array of items found within the current criteria",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGItem>*
-(NSNumber*) queryPostWithPage: (NSNumber*) page
    categoryid: (NSString*) categoryid
    sort: (NSString*) sort
    search: (NSString*) search
    minprice: (NSNumber*) minprice
    maxprice: (NSNumber*) maxprice
    query: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGItem>* output, NSError* error)) handler;


/// 
/// 
///
/// @param page Current page index. (optional)
/// @param categoryid Get items under specified category id. (optional)
/// @param sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
/// @param search Performs a regex pattern match against the items within your account (optional)
/// @param minprice Min price in hundreds. (optional)
/// @param maxprice Max price in hudreds. (optional)
/// @param query Custom parameters to query against system. (optional)
/// 
///  code:200 message:"Array of items found within the current criteria",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGDictionary>*
-(NSNumber*) queryallfieldsPostWithPage: (NSNumber*) page
    categoryid: (NSString*) categoryid
    sort: (NSString*) sort
    search: (NSString*) search
    minprice: (NSNumber*) minprice
    maxprice: (NSNumber*) maxprice
    query: (SWGDictionary*) query
    completionHandler: (void (^)(NSArray<SWGDictionary>* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id ID of the service to update
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) servicesDeleteWithId: (NSString*) _id
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// 
///  code:200 message:"Array of services within the current account",
///  code:0 message:"Unexpected error"
///
/// @return NSArray<SWGService>*
-(NSNumber*) servicesGetWithCompletionHandler: 
    (void (^)(NSArray<SWGService>* output, NSError* error)) handler;


/// 
/// 
///
/// @param service Service to create.
/// 
///  code:200 message:"Created service.",
///  code:0 message:"Unexpected error"
///
/// @return SWGService*
-(NSNumber*) servicesPostWithService: (SWGService*) service
    completionHandler: (void (^)(SWGService* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id ID of the service to update
/// @param service New service data to set.
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) servicesPutWithId: (NSString*) _id
    service: (SWGService*) service
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// 
///
/// @param _id Will delete event attached to this serviceid (optional)
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) writeDeleteWithId: (NSString*) _id
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;


/// 
/// Will ovveride the current event of the specified service.
///
/// @param eventRequest Event to upload
/// 
///  code:200 message:"If successfull the key result will be 'true'",
///  code:0 message:"Unexpected error"
///
/// @return SWGResponse*
-(NSNumber*) writePostWithEventRequest: (SWGEventRequest*) eventRequest
    completionHandler: (void (^)(SWGResponse* output, NSError* error)) handler;



@end
